package com.slash.youth.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.slash.youth.domain.CityHistoryEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY_HISTORY_ENTITY".
*/
public class CityHistoryEntityDao extends AbstractDao<CityHistoryEntity, Void> {

    public static final String TABLENAME = "CITY_HISTORY_ENTITY";

    /**
     * Properties of entity CityHistoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property City = new Property(0, String.class, "city", false, "CITY");
    };


    public CityHistoryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CityHistoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_HISTORY_ENTITY\" (" + //
                "\"CITY\" TEXT);"); // 0: city
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_HISTORY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityHistoryEntity entity) {
        stmt.clearBindings();
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(1, city);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityHistoryEntity entity) {
        stmt.clearBindings();
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(1, city);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CityHistoryEntity readEntity(Cursor cursor, int offset) {
        CityHistoryEntity entity = new CityHistoryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // city
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CityHistoryEntity entity, int offset) {
        entity.setCity(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CityHistoryEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CityHistoryEntity entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
